name: Terraform Apply

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.1
      with:
        terraform_version: v1.9.0

    - name: Set up SSH keys
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.SERVICE_ACCOUNT_KEY_FILE }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
        chmod 600 ~/.ssh/id_ed25519.pub
        echo "$SERVICE_ACCOUNT_KEY_FILE" > ~/.ssh/authorized_key.json
        chmod 600 ~/.ssh/authorized_key.json

    - name: Initialize Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform init

    - name: Apply Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform apply -auto-approve

    - name: Wait for SSH connectivity to masters and workers
      run: |
        MASTER_IPS=$(terraform output -json master_ips | jq -r '.[]')
        WORKER_IPS=$(terraform output -json worker_ips | jq -r '.[]')
        ALL_IPS="$MASTER_IPS $WORKER_IPS"
        for host in $ALL_IPS; do
          while ! nc -zv $host 22; do
            echo "Waiting for SSH connection to $host..."
            sleep 10
          done
          echo "SSH connection to $host established"
        done

    - name: Copy SSH key to the first master host
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "mkdir -p ~/.ssh && echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519"

    - name: Set up Python on the first master host
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "sudo apt-get update && sudo apt-get install -y python3-venv && python3 -m venv ~/kubespray-env && source ~/kubespray-env/bin/activate && pip install -r https://raw.githubusercontent.com/kubernetes-sigs/kubespray/master/requirements.txt"

    - name: Clone Kubespray repository on the first master host
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "source ~/kubespray-env/bin/activate && git clone https://github.com/kubernetes-sigs/kubespray.git && cd kubespray && pip install -r requirements.txt"

    - name: Copy sample inventory to mycluster on the first master host
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "cd kubespray && cp -rfp inventory/sample inventory/mycluster"

    - name: Generate Ansible inventory on the first master host
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "
          mkdir -p kubespray/inventory/mycluster
          MASTER_IPS=$(terraform output -json master_ips)
          WORKER_IPS=$(terraform output -json worker_ips)
          python3 - <<EOF
import json
from jinja2 import Template
masters = json.loads('$MASTER_IPS')
workers = json.loads('$WORKER_IPS')
template = Template('''
all:
  hosts:
    {% for master in masters %}
    k8s-master-{{ loop.index }}:
      ansible_host: {{ master }}
      ip: {{ master }}
      access_ip: {{ master }}
    {% endfor %}
    {% for worker in workers %}
    k8s-worker-{{ loop.index }}:
      ansible_host: {{ worker }}
      ip: {{ worker }}
      access_ip: {{ worker }}
    {% endfor %}
  children:
    kube_control_plane:
      hosts:
        {% for master in masters %}
        k8s-master-{{ loop.index }}:
        {% endfor %}
    kube_node:
      hosts:
        {% for worker in workers %}
        k8s-worker-{{ loop.index }}:
        {% endfor %}
    etcd:
      hosts:
        {% for master in masters %}
        k8s-master-{{ loop.index }}:
        {% endfor %}
    k8s_cluster:
      children:
        kube_control_plane:
        kube_node:
    calico_rr:
      hosts: {}
''')
with open('kubespray/inventory/mycluster/hosts.yaml', 'w') as f:
    f.write(template.render(masters=masters, workers=workers))
EOF
        "

    - name: Display Ansible Inventory
      run: |
        MASTER_IP=$(terraform output -json master_ips | jq -r '.[0]')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "cat kubespray/inventory/mycluster/hosts.yaml"

    - name: Clean up on failure
      if: failure()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform destroy -auto-approve

    - name: Display Success Message
      if: success()
      run: echo "ВСЕ НОРМАЛЬНО"

    - name: Destroy Infrastructure
      if: always()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform destroy -auto-approve

    - name: Clean up SSH keys
      if: always()
      run: |
        rm -f ~/.ssh/id_ed25519
        rm -f ~/.ssh/id_ed25519.pub
        rm -f ~/.ssh/authorized_key.json
