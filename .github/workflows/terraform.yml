name: Terraform Apply

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.1
      with:
        terraform_version: v1.9.0

    - name: Set up SSH keys
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.SERVICE_ACCOUNT_KEY_FILE }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
        chmod 600 ~/.ssh/id_ed25519.pub
        echo "$SERVICE_ACCOUNT_KEY_FILE" > ~/.ssh/authorized_key.json
        chmod 600 ~/.ssh/authorized_key.json

    - name: Initialize Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform init

    - name: Apply Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform apply -auto-approve

    - name: Get Master IPs
      id: get_master_ips
      run: echo "::set-output name=ips::$(terraform output -json master_ips | jq -r '.[]')"

    - name: Get Worker IPs
      id: get_worker_ips
      run: echo "::set-output name=ips::$(terraform output -json worker_ips | jq -r '.[]')"

    - name: Wait for 90 seconds
      run: sleep 90

    - name: Check SSH connectivity to masters
      run: |
        for host in ${{ steps.get_master_ips.outputs.ips }}; do
          nc -zv $host 22 || echo "SSH connection to $host failed"
        done

    - name: Check SSH connectivity to workers
      run: |
        for host in ${{ steps.get_worker_ips.outputs.ips }}; do
          nc -zv $host 22 || echo "SSH connection to $host failed"
        done

    - name: Copy SSH key to the first master host
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        MASTER_IP=$(echo ${{ steps.get_master_ips.outputs.ips }} | awk '{print $1}')
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ubuntu@$MASTER_IP "mkdir -p ~/.ssh && echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519"

    - name: Clean up on failure
      if: failure()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform destroy -auto-approve

    - name: Display Success Message
      if: success()
      run: echo "ВСЕ НОРМАЛЬНО"

    - name: Destroy Infrastructure
      if: always()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
      run: terraform destroy -auto-approve

    - name: Clean up SSH keys
      if: always()
      run: |
        rm -f ~/.ssh/id_ed25519
        rm -f ~/.ssh/id_ed25519.pub
        rm -f ~/.ssh/authorized_key.json
