name: Terraform Apply

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.1
      with:
        terraform_version: v1.9.0

    - name: Set up SSH keys
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.SERVICE_ACCOUNT_KEY_FILE }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
        chmod 600 ~/.ssh/id_ed25519.pub
        echo "$SERVICE_ACCOUNT_KEY_FILE" > ~/.ssh/authorized_key.json
        chmod 600 ~/.ssh/authorized_key.json

    - name: Add SSH key to agent
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519

    - name: Initialize Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
      run: terraform init

    - name: Apply Terraform
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
      run: terraform apply -auto-approve

    - name: Set up Python
      uses: actions/setup-python@v5.1.1
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install -r https://raw.githubusercontent.com/kubernetes-sigs/kubespray/master/requirements.txt

    - name: Clone Kubespray repository
      run: |
        git clone https://github.com/kubernetes-sigs/kubespray.git
        cd kubespray
        pip3 install -r requirements.txt

    - name: Generate Ansible Inventory
      run: |
        mkdir -p kubespray/inventory/mycluster
        MASTER_IPS=$(terraform output -json master_ips)
        WORKER_IPS=$(terraform output -json worker_ips)
        python3 - <<EOF
        import json
        from jinja2 import Template

        masters = json.loads('$MASTER_IPS')
        workers = json.loads('$WORKER_IPS')

        template = Template('''
        all:
          hosts:
            {% for master in masters %}
            k8s-master-{{ loop.index }}:
              ansible_host: {{ master }}
              ip: {{ master }}
              access_ip: {{ master }}
            {% endfor %}
            {% for worker in workers %}
            k8s-worker-{{ loop.index }}:
              ansible_host: {{ worker }}
              ip: {{ worker }}
              access_ip: {{ worker }}
            {% endfor %}
          children:
            kube_control_plane:
              hosts:
                {% for master in masters %}
                k8s-master-{{ loop.index }}:
                {% endfor %}
            kube_node:
              hosts:
                {% for worker in workers %}
                k8s-worker-{{ loop.index }}:
                {% endfor %}
            etcd:
              hosts:
                {% for master in masters %}
                k8s-master-{{ loop.index }}:
                {% endfor %}
            k8s_cluster:
              children:
                kube_control_plane:
                kube_node:
            calico_rr:
              hosts: ***
        ''')

        with open('kubespray/inventory/mycluster/hosts.yaml', 'w') as f:
            f.write(template.render(masters=masters, workers=workers))
        EOF

    - name: Replace *** with {} in hosts.yaml
      run: |
        sed -i 's/hosts: \*\*\*/hosts: {}/g' kubespray/inventory/mycluster/hosts.yaml

    - name: Display Ansible Inventory
      run: cat kubespray/inventory/mycluster/hosts.yaml

    - name: Wait before deploying Kubernetes cluster
      run: sleep 90

    - name: Deploy Kubernetes cluster
      run: |
        cd kubespray
        ansible-playbook -i inventory/mycluster/hosts.yaml cluster.yml -b -vvv
      shell: bash
      env:
        TERRAFORM_CLI_PATH: /home/runner/work/_temp/098db6e0-f231-407d-8350-080ba8886615
        pythonLocation: /opt/hostedtoolcache/Python/3.12.4/x64
        PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.4/x64/lib/pkgconfig
        Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.4/x64
        Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.4/x64
        Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.4/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.4/x64/lib

    - name: Clean up on failure
      if: failure()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
      run: terraform destroy -auto-approve

    - name: Display Success Message
      if: success()
      run: echo "ВСЕ НОРМАЛЬНО"

    - name: Destroy Infrastructure
      if: always()
      env:
        TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
        TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_service_account_key_file: ~/.ssh/authorized_key.json
        TF_VAR_yc_service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
      run: terraform destroy -auto-approve

    - name: Clean up SSH keys
      if: always()
      run: |
        rm -f ~/.ssh/id_ed25519
        rm -f ~/.ssh/id_ed25519.pub
        rm -f ~/.ssh/authorized_key.json
